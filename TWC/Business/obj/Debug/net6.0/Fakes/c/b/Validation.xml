<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Validation</name>
    </assembly>
    <members>
        <member name="T:Validation.Assumes">
            <summary>
            Common runtime checks that throw <see cref="T:Validation.Assumes.InternalErrorException" /> exceptions upon failure.
            </summary>
            <content>
            Contains the inner exception thrown by Assumes.
            </content>
        </member>
        <member name="M:Validation.Assumes.NotNull``1(``0)">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified value is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Validation.Assumes.NotNull``1(System.Nullable{``0})">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified value is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Validation.Assumes.NotNullOrEmpty(System.String)">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified value is <see langword="null"/> or empty.
            </summary>
        </member>
        <member name="M:Validation.Assumes.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified value is <see langword="null"/> or empty.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Validation.Assumes.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified value is <see langword="null"/> or empty.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Validation.Assumes.Null``1(``0)">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified value is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Validation.Assumes.Null``1(System.Nullable{``0})">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified value is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Validation.Assumes.Is``1(System.Object)">
            <summary>
            Throws <see cref="T:Validation.Assumes.InternalErrorException" /> if the specified object is not of a given type.
            </summary>
            <typeparam name="T">The type the value is expected to be.</typeparam>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:Validation.Assumes.False(System.Boolean,System.String)">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Validation.Assumes.False(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Validation.Assumes.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Validation.Assumes.True(System.Boolean,System.String)">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Validation.Assumes.True(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Validation.Assumes.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Validation.Assumes.NotReachable">
            <summary>
            Unconditionally throws an <see cref="T:Validation.Assumes.InternalErrorException"/>.
            </summary>
            <returns>Nothing. This method always throws.</returns>
        </member>
        <member name="M:Validation.Assumes.NotReachable``1">
            <summary>
            Unconditionally throws an <see cref="T:Validation.Assumes.InternalErrorException"/>.
            </summary>
            <typeparam name="T">The type that the method should be typed to return (although it never returns anything).</typeparam>
            <returns>Nothing. This method always throws.</returns>
        </member>
        <member name="M:Validation.Assumes.Present``1(``0)">
            <summary>
            Verifies that a value is not <see langword="null"/>, and throws <see cref="T:Validation.Assumes.InternalErrorException" /> about a missing service otherwise.
            </summary>
            <typeparam name="T">The interface of the imported part.</typeparam>
        </member>
        <member name="M:Validation.Assumes.Fail(System.String,System.Boolean)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Validation.Assumes.Fail(System.String,System.Exception,System.Boolean)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Validation.Assumes.Fail(System.String)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Validation.Assumes.Fail(System.String,System.Exception)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Validation.Assumes.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
        </member>
        <member name="T:Validation.Assumes.InternalErrorException">
            <summary>
            The exception that is thrown when an internal assumption failed.
            </summary>
        </member>
        <member name="M:Validation.Assumes.InternalErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Validation.Assumes.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="M:Validation.Assumes.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Validation.Assumes.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="M:Validation.Assumes.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Validation.Assumes.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="T:Validation.ExceptionExtensions">
            <summary>
            Extension methods for exceptions.
            </summary>
        </member>
        <member name="M:Validation.ExceptionExtensions.AddData``1(``0,System.String,System.Object[])">
            <summary>
            Adds data to the Data member of <paramref name="exception"/> before returning the modified exception.
            </summary>
            <typeparam name="T">The type of exception being modified.</typeparam>
            <param name="exception">The exception to add data to.</param>
            <param name="key">The key to use for the added data.</param>
            <param name="values">The values to add with the given <paramref name="key"/>.</param>
            <returns>A reference to the same <paramref name="exception"/>.</returns>
            <remarks>
            <para>This method should be used to add context (beyond the message and callstack we normally get) to the exception
            that would be useful when debugging Watson crashes.</para>
            <para>Do not use this method when you expect the exception to be handled.</para>
            </remarks>
        </member>
        <member name="T:Validation.IDisposableObservable">
            <summary>
            A disposable object that also provides a safe way to query its disposed status.
            </summary>
        </member>
        <member name="P:Validation.IDisposableObservable.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed.</value>
        </member>
        <member name="T:Validation.PrivateErrorHelpers">
            <summary>
            Common utility methods used by the various error detection and reporting classes.
            </summary>
        </member>
        <member name="M:Validation.PrivateErrorHelpers.TrimGenericWrapper(System.Type,System.Type)">
            <summary>
            Trims away a given surrounding type, returning just the generic type argument,
            if the given type is in fact a generic type with just one type argument and
            the generic type matches a given wrapper type.  Otherwise, it returns the original type.
            </summary>
            <param name="type">The type to trim, or return unmodified.</param>
            <param name="wrapper">The SomeType&lt;&gt; generic type definition to trim away from <paramref name="type"/> if it is present.</param>
            <returns><paramref name="type"/>, if it is not a generic type instance of <paramref name="wrapper"/>; otherwise the type argument.</returns>
        </member>
        <member name="M:Validation.PrivateErrorHelpers.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:Validation.Report">
            <summary>
            Common runtime checks that trace messages and invoke an assertion failure,
            but does *not* throw exceptions.
            </summary>
        </member>
        <member name="M:Validation.Report.IfNotPresent``1(``0)">
            <summary>
            Verifies that a value is not <see langword="null"/>, and reports an error about a missing MEF component otherwise.
            </summary>
            <typeparam name="T">The interface of the imported part.</typeparam>
        </member>
        <member name="M:Validation.Report.If(System.Boolean,System.String)">
            <summary>
            Reports an error if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Validation.Report.IfNot(System.Boolean,System.String)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Report.IfNot(System.Boolean,System.String,System.Object)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Report.IfNot(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Report.IfNot(System.Boolean,System.String,System.Object[])">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Report.Fail(System.String)">
            <summary>
            Reports a certain failure.
            </summary>
        </member>
        <member name="M:Validation.Report.Fail(System.String,System.Object[])">
            <summary>
            Reports a certain failure.
            </summary>
        </member>
        <member name="T:Validation.Requires">
            <summary>
            Common runtime checks that throw ArgumentExceptions upon failure.
            </summary>
        </member>
        <member name="M:Validation.Requires.NotNull``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Validation.Requires.NotNull(System.IntPtr,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is IntPtr.Zero.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="M:Validation.Requires.NotNull(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <remarks>
            This method allows async methods to use Requires.NotNull without having to assign the result
            to local variables to avoid C# warnings.
            </remarks>
        </member>
        <member name="M:Validation.Requires.NotNull``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the return value of the task.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <remarks>
            This method allows async methods to use Requires.NotNull without having to assign the result
            to local variables to avoid C# warnings.
            </remarks>
        </member>
        <member name="M:Validation.Requires.NotNullAllowStructs``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <remarks>
            This method exists for callers who themselves only know the type as a generic parameter which
            may or may not be a class, but certainly cannot be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:Validation.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/> or empty.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:Validation.Requires.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>, empty, or whitespace.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:Validation.Requires.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>,
            has no elements.
            </summary>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Validation.Requires.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>,
            has no elements.
            </summary>
            <typeparam name="T">The type produced by the enumeration.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Validation.Requires.NotNullEmptyOrNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is <see langword="null"/>,
            has no elements or has an element with a <see langword="null"/> value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Validation.Requires.NullOrNotNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is not <see langword="null"/>
            <em>and</em> has an element with a <see langword="null"/> value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Validation.Requires.Range(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Requires.FailRange(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if a condition does not evaluate to true.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="parameterName">The name of the parameter to blame in the exception, if thrown.</param>
            <param name="resourceManager">The resource manager from which to retrieve the exception message. For example: <c>Strings.ResourceManager</c>.</param>
            <param name="resourceName">The name of the string resource to obtain for the exception message. For example: <c>nameof(Strings.SomeError)</c>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceManager"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="condition"/> is <see langword="false"/>.</exception>
            <remarks>
            This overload allows only loading a localized string in the error condition as an optimization in perf critical sections over the simpler
            to use <see cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.String)"/> overload.
            </remarks>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object)">
            <inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object,System.Object)"/>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object,System.Object)">
            <inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)"/>
            <param name="unformattedMessageResourceName">The name of the string resource to obtain for the exception message. For example: <c>nameof(Strings.SomeError)</c>.</param>
            <param name="condition"><inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='condition']"/></param>
            <param name="parameterName"><inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='parameterName']"/></param>
            <param name="resourceManager"><inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='resourceManager']"/></param>
            <param name="arg1">The first formatting argument.</param>
            <param name="arg2">The second formatting argument.</param>
        </member>
        <member name="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String,System.Object[])">
            <inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)"/>
            <param name="unformattedMessageResourceName">The name of the string resource to obtain for the exception message. For example: <c>nameof(Strings.SomeError)</c>.</param>
            <param name="condition"><inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='condition']"/></param>
            <param name="parameterName"><inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='parameterName']"/></param>
            <param name="resourceManager"><inheritdoc cref="M:Validation.Requires.Argument(System.Boolean,System.String,System.Resources.ResourceManager,System.String)" path="/param[@name='resourceManager']"/></param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Validation.Requires.Fail(System.String)">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="M:Validation.Requires.Fail(System.String,System.Object[])">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="M:Validation.Requires.Fail(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing. This method always throws.</returns>
        </member>
        <member name="M:Validation.Requires.Defined``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a given value is not a named value of the enum type.
            </summary>
            <typeparam name="TEnum">The type of enum that may define the <paramref name="value"/>.</typeparam>
            <param name="value">The value that may be named by <typeparamref name="TEnum"/>.</param>
            <param name="parameterName">The name of the parameter to include in the exception, if thrown.</param>
        </member>
        <member name="M:Validation.Requires.NotDefault``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified parameter's value is equal to the
            default value of the <see cref="T:System.Type"/> <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:Validation.Requires.That(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.ArgumentException"/>.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="unformattedMessage">The unformatted message.</param>
            <param name="args">Formatting arguments.</param>
        </member>
        <member name="M:Validation.Requires.ValidElements``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.String)">
            <summary>
            Throws an exception if <paramref name="values"/> is <see langword="null"/>,
            <paramref name="predicate"/> is <see langword="null"/>, or if <paramref name="values"/> is not <see langword="null"/>
            <em>and</em> has an element which does not match the given predicate.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="predicate">The predicate used to test the elements.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> or <paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Validation.Requires.ValidElements``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.String,System.Object[])">
            <summary>
            Throws an exception if <paramref name="values"/> is <see langword="null"/>,
            <paramref name="predicate"/> is <see langword="null"/>, or if <paramref name="values"/> is not <see langword="null"/>
            <em>and</em> has an element which does not match the given predicate.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="predicate">The predicate used to test the elements.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <param name="unformattedMessage">The unformatted message.</param>
            <param name="args">Formatting arguments.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Validation.Requires.ValidState(System.Boolean,System.String)">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.InvalidOperationException"/>.</param>
            <param name="message">The message to include with the exception.</param>
        </member>
        <member name="M:Validation.Requires.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
        </member>
        <member name="T:Validation.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Validation.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Validation.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Validation.Strings.Argument_EmptyArray">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must contain at least one element..
            </summary>
        </member>
        <member name="P:Validation.Strings.Argument_EmptyString">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be an empty string (&quot;&quot;) or start with the <see langword="null"/> character..
            </summary>
        </member>
        <member name="P:Validation.Strings.Argument_EnumNotDefined">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must be set to a value defined by the enum &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Validation.Strings.Argument_NotEnum">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Validation.Strings.Argument_NullElement">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot contain a <see langword="null"/> (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Validation.Strings.Argument_StructIsDefault">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be the default value defined by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Validation.Strings.Argument_Whitespace">
            <summary>
              Looks up a localized string similar to The argument cannot consist entirely of white space characters..
            </summary>
        </member>
        <member name="P:Validation.Strings.InternalExceptionMessage">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please contact customer support..
            </summary>
        </member>
        <member name="P:Validation.Strings.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Validation.Strings.ServiceMissing">
            <summary>
              Looks up a localized string similar to Cannot find an instance of the {0} service..
            </summary>
        </member>
        <member name="T:Validation.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="M:Validation.ValidatedNotNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Validation.ValidatedNotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:Validation.Verify">
            <summary>
            Common runtime checks that throw exceptions upon failure.
            </summary>
        </member>
        <member name="M:Validation.Verify.Operation(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Validation.Verify.Operation(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Validation.Verify.Operation(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Validation.Verify.Operation(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Validation.Verify.OperationWithHelp(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Validation.Verify.FailOperation(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <returns>
            Nothing.  This method always throws.
            The signature claims to return an exception to allow callers to throw this method
            to satisfy C# execution path constraints.
            </returns>
        </member>
        <member name="M:Validation.Verify.NotDisposed(Validation.IDisposableObservable,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if an object is disposed.
            </summary>
        </member>
        <member name="M:Validation.Verify.NotDisposed(System.Boolean,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Validation.Verify.NotDisposed(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Validation.Verify.HResult(System.Int32,System.Boolean)">
            <summary>
            Throws an exception if the given value is negative.
            </summary>
            <param name="hresult">The HRESULT corresponding to the desired exception.</param>
            <param name="ignorePreviousComCalls">If true, prevents <c>ThrowExceptionForHR</c> from returning an exception from a previous COM call and instead always use the HRESULT specified.</param>
            <remarks>
            No exception is thrown for S_FALSE.
            </remarks>
        </member>
    </members>
</doc>
